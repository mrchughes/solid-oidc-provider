{
    "info": {
        "name": "Solid OIDC Provider Collection",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": "This collection tests the Solid OIDC Provider with GOV.UK styling implementation."
    },
    "item": [
        {
            "name": "1. OIDC Discovery",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/.well-known/openid-configuration",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        ".well-known",
                        "openid-configuration"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains OIDC configuration\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('issuer');",
                            "    pm.expect(jsonData).to.have.property('authorization_endpoint');",
                            "    pm.expect(jsonData).to.have.property('token_endpoint');",
                            "    pm.expect(jsonData).to.have.property('userinfo_endpoint');",
                            "    pm.expect(jsonData).to.have.property('jwks_uri');",
                            "    pm.expect(jsonData).to.have.property('registration_endpoint');",
                            "});",
                            "",
                            "// Store important endpoints for subsequent requests",
                            "var jsonData = pm.response.json();",
                            "pm.environment.set(\"issuer\", jsonData.issuer);",
                            "pm.environment.set(\"authorization_endpoint\", jsonData.authorization_endpoint);",
                            "pm.environment.set(\"token_endpoint\", jsonData.token_endpoint);",
                            "pm.environment.set(\"userinfo_endpoint\", jsonData.userinfo_endpoint);",
                            "pm.environment.set(\"registration_endpoint\", jsonData.registration_endpoint);",
                            "pm.environment.set(\"jwks_uri\", jsonData.jwks_uri);"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Initialize any environment variables needed",
                            "if (!pm.environment.get(\"base_url\")) {",
                            "    pm.environment.set(\"base_url\", \"http://localhost:3001\");",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "2. JWKS",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{jwks_uri}}",
                    "host": [
                        "{{jwks_uri}}"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains keys\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('keys');",
                            "    pm.expect(jsonData.keys).to.be.an('array').that.is.not.empty;",
                            "});",
                            "",
                            "pm.test(\"Keys have required properties\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    var key = jsonData.keys[0];",
                            "    pm.expect(key).to.have.property('kid');",
                            "    pm.expect(key).to.have.property('kty');",
                            "    pm.expect(key).to.have.property('use');",
                            "    pm.expect(key).to.have.property('alg');",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "3. Register Client",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{registration_endpoint}}",
                    "host": [
                        "{{registration_endpoint}}"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\"https://client.example.org/callback\"],\n  \"client_name\": \"Test Client for GOV.UK Styled OIDC Provider\",\n  \"logo_uri\": \"https://client.example.org/logo.png\",\n  \"subject_type\": \"pairwise\",\n  \"grant_types\": [\"authorization_code\", \"refresh_token\"],\n  \"response_types\": [\"code\"],\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"scope\": \"openid profile email webid\"\n}"
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"Response contains client credentials\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('client_id');",
                            "    pm.expect(jsonData).to.have.property('client_secret');",
                            "    pm.expect(jsonData).to.have.property('registration_access_token');",
                            "    pm.expect(jsonData).to.have.property('registration_client_uri');",
                            "});",
                            "",
                            "// Store client credentials for subsequent requests",
                            "var jsonData = pm.response.json();",
                            "pm.environment.set(\"client_id\", jsonData.client_id);",
                            "pm.environment.set(\"client_secret\", jsonData.client_secret);",
                            "pm.environment.set(\"redirect_uri\", jsonData.redirect_uris[0]);"
                        ]
                    }
                }
            ]
        },
        {
            "name": "4. User Registration",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/register",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "register"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"SecurePassword123!\",\n  \"name\": \"Test User\"\n}"
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"Response contains user information\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('id');",
                            "    pm.expect(jsonData).to.have.property('webid');",
                            "    pm.expect(jsonData).to.have.property('email');",
                            "});",
                            "",
                            "// Store user details for subsequent requests",
                            "var jsonData = pm.response.json();",
                            "pm.environment.set(\"user_id\", jsonData.id);",
                            "pm.environment.set(\"user_webid\", jsonData.webid);",
                            "pm.environment.set(\"user_email\", jsonData.email);",
                            "",
                            "// For login in the next request",
                            "pm.environment.set(\"test_email\", jsonData.email);",
                            "pm.environment.set(\"test_password\", \"SecurePassword123!\");"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Generate random user data if needed",
                            "const randomEmail = pm.variables.replaceIn('{{$randomEmail}}');",
                            "pm.environment.set(\"random_email\", randomEmail);",
                            "",
                            "// Update request body with generated email",
                            "try {",
                            "    const requestBody = JSON.parse(pm.request.body.raw);",
                            "    requestBody.email = randomEmail;",
                            "    pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
                            "} catch (e) {",
                            "    console.error(\"Error updating request body:\", e);",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "5. Login Page (HTML)",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/login",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "login"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response is HTML\", function () {",
                            "    pm.response.to.have.header(\"Content-Type\");",
                            "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
                            "});",
                            "",
                            "pm.test(\"HTML contains GOV.UK styling\", function () {",
                            "    pm.expect(pm.response.text()).to.include(\"govuk-template\");",
                            "    pm.expect(pm.response.text()).to.include(\"govuk-header\");",
                            "    pm.expect(pm.response.text()).to.include(\"govuk-frontend\");",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "6. User Login",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/login",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "login"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains access token\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('access_token');",
                            "    pm.expect(jsonData).to.have.property('token_type').to.eql('Bearer');",
                            "    pm.expect(jsonData).to.have.property('expires_in');",
                            "});",
                            "",
                            "// Store token for subsequent requests",
                            "var jsonData = pm.response.json();",
                            "pm.environment.set(\"access_token\", jsonData.access_token);",
                            "if (jsonData.id_token) {",
                            "    pm.environment.set(\"id_token\", jsonData.id_token);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Ensure login credentials are available",
                            "if (!pm.environment.get(\"test_email\") || !pm.environment.get(\"test_password\")) {",
                            "    console.warn(\"Missing test credentials for login. Using defaults.\");",
                            "    pm.environment.set(\"test_email\", \"test@example.com\");",
                            "    pm.environment.set(\"test_password\", \"SecurePassword123!\");",
                            "}",
                            "",
                            "// Update request body with stored credentials",
                            "try {",
                            "    const requestBody = JSON.parse(pm.request.body.raw);",
                            "    requestBody.email = pm.environment.get(\"test_email\");",
                            "    requestBody.password = pm.environment.get(\"test_password\");",
                            "    pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
                            "} catch (e) {",
                            "    console.error(\"Error updating request body:\", e);",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "7. Get User Info",
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{userinfo_endpoint}}",
                    "host": [
                        "{{userinfo_endpoint}}"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains user information\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('sub');",
                            "    pm.expect(jsonData).to.have.property('webid');",
                            "    pm.expect(jsonData).to.have.property('email').to.eql(pm.environment.get(\"test_email\"));",
                            "});",
                            "",
                            "pm.test(\"WebID is properly formatted\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData.webid).to.be.a('string');",
                            "    pm.expect(jsonData.webid).to.match(/^https?:\\/\\/.+/);",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "8. Get Profile Page (HTML)",
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Cookie",
                        "value": "connect.sid={{session_id}}"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/profile",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "profile"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200 or 302\", function () {",
                            "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                            "});",
                            "",
                            "if (pm.response.code === 200) {",
                            "    pm.test(\"Response is HTML\", function () {",
                            "        pm.response.to.have.header(\"Content-Type\");",
                            "        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
                            "    });",
                            "",
                            "    pm.test(\"HTML contains GOV.UK styling\", function () {",
                            "        pm.expect(pm.response.text()).to.include(\"govuk-template\");",
                            "        pm.expect(pm.response.text()).to.include(\"govuk-header\");",
                            "        pm.expect(pm.response.text()).to.include(\"govuk-frontend\");",
                            "    });",
                            "    ",
                            "    // Extract session ID from cookies if available",
                            "    const cookies = pm.cookies.all();",
                            "    cookies.forEach(function(cookie) {",
                            "        if (cookie.name === \"connect.sid\") {",
                            "            pm.environment.set(\"session_id\", cookie.value);",
                            "        }",
                            "    });",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "9. Reset Password Request",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/reset-password",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "reset-password"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"{{test_email}}\"\n}"
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response confirms password reset request\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('message');",
                            "});"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Make sure we have a test email",
                            "if (!pm.environment.get(\"test_email\")) {",
                            "    pm.environment.set(\"test_email\", \"test@example.com\");",
                            "}",
                            "",
                            "// Update request body",
                            "try {",
                            "    const requestBody = JSON.parse(pm.request.body.raw);",
                            "    requestBody.email = pm.environment.get(\"test_email\");",
                            "    pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
                            "} catch (e) {",
                            "    console.error(\"Error updating request body:\", e);",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "10. Get Register Page (HTML)",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{base_url}}/register",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "register"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response is HTML\", function () {",
                            "    pm.response.to.have.header(\"Content-Type\");",
                            "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
                            "});",
                            "",
                            "pm.test(\"HTML contains GOV.UK styling\", function () {",
                            "    pm.expect(pm.response.text()).to.include(\"govuk-template\");",
                            "    pm.expect(pm.response.text()).to.include(\"govuk-header\");",
                            "    pm.expect(pm.response.text()).to.include(\"govuk-frontend\");",
                            "    pm.expect(pm.response.text()).to.include(\"govuk-button\");",
                            "    pm.expect(pm.response.text()).to.include(\"govuk-form-group\");",
                            "});"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global Pre-request Script",
                    "// Initialize environment variables if they don't exist",
                    "",
                    "if (!pm.environment.get(\"base_url\")) {",
                    "    pm.environment.set(\"base_url\", \"http://localhost:3001\");",
                    "}",
                    "",
                    "// Set current timestamp for rate limiting considerations",
                    "pm.environment.set(\"current_timestamp\", new Date().toISOString());",
                    "",
                    "// Log request for debugging",
                    "console.log(`[${new Date().toISOString()}] Preparing request: ${pm.request.method} ${pm.request.url}`);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global Test Script",
                    "// Log response times for performance monitoring",
                    "console.log(`[${new Date().toISOString()}] Response time: ${pm.response.responseTime} ms`);",
                    "",
                    "// Check Content-Type header for all JSON responses",
                    "if (pm.response.headers.get(\"Content-Type\") && ",
                    "    pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
                    "    pm.test(\"Response is valid JSON\", function() {",
                    "        pm.response.to.be.json;",
                    "    });",
                    "}",
                    "",
                    "// Log any failed tests for easier debugging",
                    "if (pm.test.allTests.length > 0) {",
                    "    const failedTests = pm.test.allTests.filter(test => !test.passed);",
                    "    if (failedTests.length > 0) {",
                    "        console.log(\"Failed tests: \", failedTests.map(test => test.name));",
                    "    }",
                    "}"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:3001",
            "type": "string"
        }
    ]
}