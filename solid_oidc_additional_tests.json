{
    "info": {
        "name": "Solid OIDC Provider Additional Tests",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "description": "Additional tests for the Solid OIDC Provider service covering the must-pass requirements."
    },
    "item": [
        {
            "name": "Authorization Flow",
            "item": [
                {
                    "name": "Authorization Request",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri={{redirect_uri}}&scope=openid%20profile%20email%20webid&state={{state}}&code_challenge={{code_challenge}}&code_challenge_method=S256",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "authorize"
                            ],
                            "query": [
                                {
                                    "key": "response_type",
                                    "value": "code"
                                },
                                {
                                    "key": "client_id",
                                    "value": "{{client_id}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{redirect_uri}}"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid%20profile%20email%20webid"
                                },
                                {
                                    "key": "state",
                                    "value": "{{state}}"
                                },
                                {
                                    "key": "code_challenge",
                                    "value": "{{code_challenge}}"
                                },
                                {
                                    "key": "code_challenge_method",
                                    "value": "S256"
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "// This endpoint typically redirects to login page or consent screen",
                                    "// We're expecting either a redirect or the HTML login page",
                                    "pm.test(\"Response is either redirect or login page\", function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 302) {",
                                    "    pm.test(\"Redirect URL contains authorization code\", function () {",
                                    "        const location = pm.response.headers.get(\"Location\");",
                                    "        pm.expect(location).to.include(\"code=\");",
                                    "        ",
                                    "        // Extract the code from the URL",
                                    "        const code = location.split(\"code=\")[1].split(\"&\")[0];",
                                    "        pm.environment.set(\"auth_code\", code);",
                                    "    });",
                                    "}",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test(\"Response contains login form\", function () {",
                                    "        pm.expect(pm.response.text()).to.include(\"login\");",
                                    "    });",
                                    "}"
                                ]
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "// Generate state parameter for CSRF protection",
                                    "const state = pm.variables.replaceIn('{{$randomUUID}}');",
                                    "pm.environment.set(\"state\", state);",
                                    "",
                                    "// Generate code verifier and challenge for PKCE",
                                    "function base64URLEncode(str) {",
                                    "    return str.toString('base64')",
                                    "        .replace(/\\+/g, '-')",
                                    "        .replace(/\\//g, '_')",
                                    "        .replace(/=/g, '');",
                                    "}",
                                    "",
                                    "function sha256(buffer) {",
                                    "    return CryptoJS.SHA256(buffer);",
                                    "}",
                                    "",
                                    "const codeVerifier = pm.variables.replaceIn('{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}');",
                                    "const codeChallenge = base64URLEncode(sha256(codeVerifier));",
                                    "",
                                    "pm.environment.set(\"code_verifier\", codeVerifier);",
                                    "pm.environment.set(\"code_challenge\", codeChallenge);"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Token Exchange",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "grant_type",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "value": "{{auth_code}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{redirect_uri}}"
                                },
                                {
                                    "key": "client_id",
                                    "value": "{{client_id}}"
                                },
                                {
                                    "key": "code_verifier",
                                    "value": "{{code_verifier}}"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{token_endpoint}}",
                            "host": [
                                "{{token_endpoint}}"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response contains tokens\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('access_token');",
                                    "    pm.expect(jsonData).to.have.property('id_token');",
                                    "    pm.expect(jsonData).to.have.property('token_type').to.eql('Bearer');",
                                    "    pm.expect(jsonData).to.have.property('expires_in');",
                                    "});",
                                    "",
                                    "pm.test(\"Token contains webid claim\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    ",
                                    "    // If we have a function to decode the JWT, use it",
                                    "    // Otherwise we'll just test the token format",
                                    "    const idToken = jsonData.id_token;",
                                    "    pm.expect(idToken.split('.').length).to.eql(3); // JWT has 3 parts",
                                    "});",
                                    "",
                                    "// Store tokens for subsequent requests",
                                    "const jsonData = pm.response.json();",
                                    "pm.environment.set(\"access_token\", jsonData.access_token);",
                                    "pm.environment.set(\"id_token\", jsonData.id_token);",
                                    "pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Dynamic Client Registration",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"application_type\": \"web\",\n  \"redirect_uris\": [\"https://client.example.org/callback\"],\n  \"client_name\": \"Solid OIDC Test Client\",\n  \"subject_type\": \"pairwise\",\n  \"grant_types\": [\"authorization_code\", \"refresh_token\"],\n  \"response_types\": [\"code\"],\n  \"token_endpoint_auth_method\": \"client_secret_basic\",\n  \"scope\": \"openid profile email webid\"\n}"
                },
                "url": {
                    "raw": "{{base_url}}/register",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "register"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"Response contains client credentials\", function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('client_id');",
                            "    pm.expect(jsonData).to.have.property('client_secret');",
                            "    pm.expect(jsonData).to.have.property('registration_access_token');",
                            "    pm.expect(jsonData).to.have.property('registration_client_uri');",
                            "});",
                            "",
                            "// Store client credentials for subsequent requests",
                            "const jsonData = pm.response.json();",
                            "pm.environment.set(\"client_id\", jsonData.client_id);",
                            "pm.environment.set(\"client_secret\", jsonData.client_secret);",
                            "pm.environment.set(\"redirect_uri\", jsonData.redirect_uris[0]);"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Refresh Token Exchange",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/x-www-form-urlencoded"
                    }
                ],
                "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                        {
                            "key": "grant_type",
                            "value": "refresh_token"
                        },
                        {
                            "key": "refresh_token",
                            "value": "{{refresh_token}}"
                        },
                        {
                            "key": "client_id",
                            "value": "{{client_id}}"
                        },
                        {
                            "key": "client_secret",
                            "value": "{{client_secret}}"
                        },
                        {
                            "key": "scope",
                            "value": "openid profile email webid"
                        }
                    ]
                },
                "url": {
                    "raw": "{{token_endpoint}}",
                    "host": [
                        "{{token_endpoint}}"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains new tokens\", function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('access_token');",
                            "    pm.expect(jsonData).to.have.property('id_token');",
                            "    pm.expect(jsonData).to.have.property('token_type').to.eql('Bearer');",
                            "    pm.expect(jsonData).to.have.property('expires_in');",
                            "});",
                            "",
                            "// Store new tokens",
                            "const jsonData = pm.response.json();",
                            "pm.environment.set(\"access_token\", jsonData.access_token);",
                            "pm.environment.set(\"id_token\", jsonData.id_token);",
                            "if (jsonData.refresh_token) {",
                            "    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
                            "}"
                        ]
                    }
                }
            ]
        },
        {
            "name": "View Active Sessions",
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/sessions",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "sessions"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains session information\", function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.be.an('array');",
                            "    ",
                            "    if (jsonData.length > 0) {",
                            "        pm.expect(jsonData[0]).to.have.property('id');",
                            "        pm.expect(jsonData[0]).to.have.property('client_id');",
                            "        pm.expect(jsonData[0]).to.have.property('created_at');",
                            "        pm.expect(jsonData[0]).to.have.property('last_used');",
                            "    }",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Two-Factor Setup",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"enable\": true\n}"
                },
                "url": {
                    "raw": "{{base_url}}/2fa/setup",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "2fa",
                        "setup"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains setup information\", function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('secret');",
                            "    pm.expect(jsonData).to.have.property('qrcode');",
                            "});",
                            "",
                            "// Store the secret for the next request",
                            "const jsonData = pm.response.json();",
                            "pm.environment.set(\"totp_secret\", jsonData.secret);"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Two-Factor Verify",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                    },
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"token\": \"123456\"\n}"
                },
                "url": {
                    "raw": "{{base_url}}/2fa/verify",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "2fa",
                        "verify"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200 or 401\", function () {",
                            "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                            "});",
                            "",
                            "if (pm.response.code === 200) {",
                            "    pm.test(\"Verification successful\", function () {",
                            "        const jsonData = pm.response.json();",
                            "        pm.expect(jsonData).to.have.property('verified');",
                            "        pm.expect(jsonData.verified).to.be.true;",
                            "    });",
                            "}",
                            "",
                            "if (pm.response.code === 401) {",
                            "    pm.test(\"Verification failed as expected with dummy code\", function () {",
                            "        const jsonData = pm.response.json();",
                            "        pm.expect(jsonData).to.have.property('error');",
                            "    });",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// In a real test, we would generate a valid TOTP token here",
                            "// But since we don't have the secret key and this is just a test,",
                            "// we'll use a dummy value"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Revoke Client Consent",
            "request": {
                "method": "DELETE",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/consent/{{client_id}}",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "consent",
                        "{{client_id}}"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200 or 204\", function () {",
                            "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                            "});"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global Pre-request Script",
                    "// Initialize environment variables if they don't exist",
                    "",
                    "if (!pm.environment.get(\"base_url\")) {",
                    "    pm.environment.set(\"base_url\", \"http://localhost:3010\");",
                    "}",
                    "",
                    "// Set current timestamp for rate limiting considerations",
                    "pm.environment.set(\"current_timestamp\", new Date().toISOString());"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global Test Script",
                    "// Log response times for performance monitoring",
                    "console.log(\"Response time: \" + pm.response.responseTime + \" ms\");",
                    "",
                    "// Check Content-Type header for all JSON responses",
                    "if (pm.response.headers.get(\"Content-Type\") && ",
                    "    pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
                    "    pm.test(\"Response is valid JSON\", function() {",
                    "        pm.response.to.be.json;",
                    "    });",
                    "}",
                    "",
                    "// Log any failed tests for easier debugging",
                    "if (pm.test.allTests.length > 0) {",
                    "    const failedTests = pm.test.allTests.filter(test => !test.passed);",
                    "    if (failedTests.length > 0) {",
                    "        console.log(\"Failed tests: \", failedTests.map(test => test.name));",
                    "    }",
                    "}"
                ]
            }
        }
    ]
}
