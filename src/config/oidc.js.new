const fs = require('fs');
const path = require('path');
const jose = require('jose');
const userService = require('../services/user');
const config = require('../config');

// Generate JWK from PEM key
const generateJwk = () => {
    try {
        const privateKeyPath = path.resolve(process.env.JWT_PRIVATE_KEY_PATH || './keys/private.key');
        const privateKey = fs.readFileSync(privateKeyPath, 'utf8');
        
        // Convert PEM to JWK
        return jose.JWK.asKey(privateKey, { kid: 'solid-oidc-key', alg: 'RS256', use: 'sig' }).toJWK(true);
    } catch (error) {
        console.error('Error generating JWK:', error);
        throw new Error('Failed to generate JWK');
    }
};

const jwk = generateJwk();

const configuration = {
    // OIDC Provider configuration
    claims: {
        // OpenID Connect standard claims
        openid: ['sub'],
        email: ['email', 'email_verified'],
        profile: ['name', 'family_name', 'given_name', 'preferred_username'],
        // Solid OIDC specific claims
        webid: ['webid'],
    },

    // Enable basic client registration
    clientRegistration: {
        // Allow dynamic client registration
        initialAccessToken: false,
    },

    // Configure features
    features: {
        devInteractions: { enabled: false },
        deviceFlow: { enabled: true },
        introspection: { enabled: true },
        revocation: { enabled: true },
        resourceIndicators: { enabled: true },
    },

    // Cookie and token configuration
    cookies: {
        keys: [config.cookieSecret],
        names: {
            session: 'solid_oidc_session',
        }
    },

    // Define JWT formats
    formats: {
        AccessToken: 'jwt',
    },

    // Token TTLs
    ttl: {
        AccessToken: 1 * 60 * 60, // 1 hour
        AuthorizationCode: 10 * 60, // 10 minutes
        IdToken: 1 * 60 * 60, // 1 hour
        RefreshToken: 30 * 24 * 60 * 60, // 30 days
    },

    // JWT signing and encryption
    jwks: {
        keys: [jwk],
    },

    // Customize token payload
    findAccount: async (ctx, id) => {
        const user = await userService.findUserById(id);
        if (!user) return undefined;

        return {
            accountId: id,
            claims: async (use, scope) => {
                const claims = {
                    sub: id,
                };

                // Add claims based on scope
                if (scope.includes('email')) {
                    claims.email = user.email;
                    claims.email_verified = user.emailVerified || false;
                }

                if (scope.includes('profile')) {
                    claims.name = user.name || '';
                    claims.preferred_username = user.username || '';
                }

                // Always include webid claim for Solid OIDC
                claims.webid = user.webid;

                return claims;
            },
        };
    },

    // Custom login
    interactions: {
        url(ctx, interaction) {
            return `/interaction/${interaction.uid}`;
        },
    },

    // Response types
    responseTypes: ['code', 'id_token', 'code id_token'],
    
    // Token endpoint auth methods
    tokenEndpointAuthMethods: [
        'client_secret_basic',
        'client_secret_post',
        'none',
    ],
};

module.exports = configuration;
